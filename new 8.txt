import requests
import zipfile
import io
import sys
import json
import pymongo
import requests
import os
import subprocess

from git import Repo
from pymongo import MongoClient
# CHange To work For IBM
#check_username_url = "https://github.ibm.com/ITT-Projects"
check_username_url = "https://api.github.com/users/"
repos_url = "https://api.github.com/users/"
repo_zip_url = "https://github.com/"
client = MongoClient('mongodb://localhost:27017')

db = client.ibm_test
dep_coll = db.dependencies
repo_coll = db.repos
repositoryList = []


def checkUsername(username=None):
    if username:
        url = check_username_url + username
        response = requests.get(url)
        user = response.json()
        if user.get("login", ""):
            return True
        else:
            return False
    else:
        return False


def getRepos(username=None):
    print("Getting your Repository List")
    if username:
        try:
            url = repos_url + username + "/repos"
            response = requests.get(url)
            repos = response.json()
            return repos
        except Exception as e:
            print(e)
    else:
        return "Oops ! you don't have pass your username ."

# Edit So that if Language Is Python, Java or NPM run scripts.


def node(repos_url, repo_id):
    try:
        #test = db.test
        # Get the previous clone out of the way
        deleteCommand = "rm -rf build/npm"
        process = subprocess.Popen(
        deleteCommand.split(), stdout=subprocess.PIPE)
        output, error = process.communicate()
        #HTTPS_REMOTE_URL = 'https://cd04c8a595e2ab891cde364e9eaad5388fb536b4@github.com/Thegrinch1985/app.git'
        HTTPS_REMOTE_URL = repos_url
        DEST_NAME = 'build/npm'
        cloned_repo = Repo.clone_from(HTTPS_REMOTE_URL, DEST_NAME)

        # npm list -prod -depth 0
        buildCommand = "cd build/npm/express-ibm && npm list -prod -depth -0 -json true"

        process = subprocess.Popen(
            buildCommand, stdout=subprocess.PIPE, shell=True)

        output, error = process.communicate()
        data = json.loads(output.decode('UTF-8'))
        repo_entry = {}
        #repo_id = repo_coll.insert_one(repo_entry).inserted_id
        for v in data['dependencies'].values():
            if 'version' in v.keys():
                db_entry = {}
                db_entry['name'] = v['from']
                db_entry['version'] = v['version']
                db_entry['repo_id'] = repo_id
                dep_coll.insert_one(db_entry)

        cursor = dep_coll.find({'repo_id': repo_id})
        for document in cursor:
            print(document)

    except Exception as e:
        print(e)
       # return False


def process_entry_Java(entry, entries, repo_id):
    for v in entry:
        if isinstance(v, dict):
            db_entry = {}
            db_entry['name'] = v['artifactId']
            db_entry['version'] = v['version']
            db_entry['repo_id'] = repo_id
            print(db_entry)
            if db_entry not in entries:
                entries.append(db_entry)
            if 'dependencies' in v:
                process_entry_Java(v['dependencies'], entries, repo_id)


def process_entry_PY(entry, entries, repo_id):
    for v in entry:
        if isinstance(v, dict):
            db_entry = {}
            db_entry['name'] = v['name']
            db_entry['version'] = v['version']
            db_entry['repo_id'] = repo_id
            print(db_entry)
            if db_entry not in entries:
                entries.append(db_entry)
            if 'dependencies' in v:
                process_entry_PY(v['dependencies'], entries, repo_id)

def java(repos_url, repo_id):
 try:
     
     #Pass in Name to replace dep-mgmt-gradle Will only work For certain Java 
    deleteCommand = "rm -rf build/dep-mgmt-java-gradle"
    process = subprocess.Popen(deleteCommand.split(), stdout=subprocess.PIPE)
    output, error = process.communicate()

    HTTPS_REMOTE_URL = repos_url
    DEST_NAME = 'build/dep-mgmt-java-gradle'
    cloned_repo = Repo.clone_from(HTTPS_REMOTE_URL, DEST_NAME)
    
    # Inject the new gradle task to the project build file
    f = open('custom_build.gradle')
    f1 = open('build/dep-mgmt-java-gradle/build.gradle', 'a')
    for x in f.readlines():
        f1.write(x)
    f.close()
    f1.close()

    # Get the dependencies, call the custom gradle task we injected
    buildCommand = "build/dep-mgmt-java-gradle/gradlew -q -b build/dep-mgmt-java-gradle/build.gradle printSolvedDepsTreeInJson"
    process = subprocess.Popen(buildCommand.split(), stdout=subprocess.PIPE)
    output, error = process.communicate()

    process = subprocess.Popen(buildCommand, stdout=subprocess.PIPE, shell=True)


    output, error = process.communicate()
    data = json.loads(output.decode('UTF-8'))

    page = open("JSON/Java.json", "r")
    parsed = json.loads(page.read())

    all_entries = []

    process_entry_Java(parsed, all_entries, repo_id)

    print("*****************************")
    print(all_entries)
    print("*****************************")

    for entry in all_entries:
        print("inserting dependency")
        dep_coll.insert_one(entry)


    cursor = dep_coll.find({'repo_id': repo_id})
    for document in cursor:
        print(document)
    if error is not None:
        print(error)
 except Exception as e:
        print(e)
      

def py(repos_url, repo_id):
 try:
    deleteCommand = "rm -rf build/Py"
    process = subprocess.Popen(deleteCommand.split(), stdout=subprocess.PIPE)
    output, error = process.communicate()

    HTTPS_REMOTE_URL = repos_url
    DEST_NAME = 'build/Py'
    cloned_repo = Repo.clone_from(HTTPS_REMOTE_URL, DEST_NAME)

    buildCommand = "cd build/Py && pip list --format=json"  # -prod -depth 0
    process = subprocess.Popen(buildCommand, stdout=subprocess.PIPE, shell=True)


    output, error = process.communicate()
    data = json.loads(output.decode('UTF-8'))

    page = open("JSON/Py.json", "r")
    parsed = json.loads(page.read())

    all_entries = []


    process_entry_PY(parsed, all_entries, repo_id)

    print("*****************************")
    print(all_entries)
    print("*****************************")

    for entry in all_entries:
        print("inserting dependency")
        dep_coll.insert_one(entry)

    cursor = dep_coll.find({'repo_id': repo_id})
    for document in cursor:
        print(document)
    if error is not None:
        print(error)
 except Exception as e:
        print(e)
  

def cplusplus(repos_url, repo_id):

 try:
    print("C++ Method Called")
 except Exception as e:
        print(e)


def csharpe(repos_url, repo_id):
   try:
    deleteCommand = "rm -rf build/C#"
    process = subprocess.Popen(deleteCommand.split(), stdout=subprocess.PIPE)
    output, error = process.communicate()

    HTTPS_REMOTE_URL = repos_url
    DEST_NAME = 'build/C#'
    cloned_repo = Repo.clone_from(HTTPS_REMOTE_URL, DEST_NAME)
    for filename in os.listdir(DEST_NAME):
        if filename.endswith(".csproj"):
            #f = open(filename)
            #lines = f.read()
            print("build found" + filename)
            buildCommand = "dotnet list "+"filename"+".csproj reference"
            process = subprocess.Popen(
                buildCommand, stdout=subprocess.PIPE, shell=True)
    #dotnet list app/app.csproj reference
   except Exception as e:
        print(e)


def sbt(repos_url, repo_id):
   try:
    deleteCommand = "rm -rf build/SBT"
    process = subprocess.Popen(deleteCommand.split(), stdout=subprocess.PIPE)
    output, error = process.communicate()

    HTTPS_REMOTE_URL = repos_url
    DEST_NAME = 'build/SBT'
    cloned_repo = Repo.clone_from(HTTPS_REMOTE_URL, DEST_NAME)

    
    #directory = 'the/directory/you/want/to/use'
    for filename in os.listdir(DEST_NAME):
        if filename.startswith("build"):
            #f = open(filename)
            #lines = f.read()
            print("build found" + filename)
            buildCommand = "sbt"+"inspect tree clean"
            process = subprocess.Popen(buildCommand, stdout=subprocess.PIPE, shell=True)


            output, error = process.communicate()
            data = json.loads(output.decode('UTF-8'))

            page = open("JSON/SBT.json", "r")
            parsed = json.loads(page.read())

            all_entries = []


            process_entry_PY(parsed, all_entries, repo_id)

            print("*****************************")
            print(all_entries)
            print("*****************************")
      
   except Exception as e:
        print(e)

def saveRepos(username, repos=None):
    if repos:
        try:

            repo_number = 1
            for repo in repos:
                reponame = repo["name"]
                repoLanguage = repo['language']
                repourl = repo['url']
                repoBranch = repo['default_branch']
                repoOpenIssues = repo['open_issues_count']
                repo_clone_url = repo['clone_url']
                repo_d = repo['description']

                print(str(" downloading....\n"))
                print(str(repo_number) + "\nRepository Name : " + reponame + "\nLanguage : " + repoLanguage +
                      "\nBranch : " + repoBranch + "\n Open Issues : " + str(repoOpenIssues) + "\n URL : "
                          + repos_url + "\nDescription" + str(repo_d))
                repo_entry = {}
                repo_entry['name'] = reponame
                repo_entry['language'] = repoLanguage
                repo_entry['url'] = repos_url
                repo_entry['branch'] = repoBranch
                repo_entry['openissues'] = repoOpenIssues
                repo_id = repo_coll.insert_one(repo_entry).inserted_id

                if repoLanguage == 'JavaScript':
                    node(repo_clone_url, repo_id)
                elif repoLanguage == 'Java':
                    java(repo_clone_url, repo_id)
                elif repoLanguage == 'Python':
                    py(repo_clone_url, repo_id)
                elif repoLanguage == 'C++':
                    cplusplus(repos_url, repo_id)
                elif repoLanguage == 'C#':
                    csharpe(repo_clone_url, repo_id)
                elif repoLanguage == 'HTML':
                    sbt(repo_clone_url, repo_id)

                #print("After Node Method Called ")
                #repozipurl = repo_zip_url + username + "/" + reponame + "/archive/master.zip"
                #get_repo_zip = requests.get(repozipurl)
                #repozipfile = zipfile.ZipFile(io.BytesIO(get_repo_zip.content))
                #print("\tExtracting " + reponame + "....")
                # repozipfile.extractall('build/all')
                print("\t" + reponame + "downloading Complete :)")
                # iterateOverRepos(repoLanguage)
                repo_number += 1

                # repositoryList.append(repo)
                # print(repositoryList)
                client.close()
            return True
        except Exception as e:
            print(e)
            return False
    else:
        return "Oops! Your don't have any Repository"
# def iterateOverRepos(repoLanguage):


def main():
    username = input("Enter your Github Profile username : ")
    if checkUsername(username):
        repos = getRepos(username)
        status = saveRepos(username=username, repos=repos)
        if status:
            print("Done")
        else:
            print("Oops ! something went wrong :(")
    else:
        print("Username does not exist !")


if __name__ == "__main__":
    main()
    sys.exit()
